AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
AIRFLOW__CELERY__BROKER_URL=
AIRFLOW__CELERY__RESULT_BACKEND=
AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
AIRFLOW__CORE__EXECUTOR=CeleryExecutor
AIRFLOW__CORE__FERNET_KEY=
AIRFLOW__CORE__LOAD_EXAMPLES=false
# For backward compatibility, with Airflow <2.3
AIRFLOW__CORE__SQL_ALCHEMY_CONN=
AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=

# Use simple http server on scheduler for health checks
# See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true

NEO4J_PROTOCOL=bolt
NEO4J_HOST=neo4j
NEO4J_PORT=7687
NEO4J_DB=neo4j
NEO4J_USER=
NEO4J_PASSWORD=

MONGODB_HOST=mongodb
MONGODB_PORT=27017
MONGODB_USER=
MONGODB_PASS=

POSTGRES_HOST=pgvector
POSTGRES_PORT=5432
POSTGRES_USER=
POSTGRES_PASS=

CHUNK_SIZE=512
EMBEDDING_DIM=1024
COHERE_API_KEY=
OPENAI_API_KEY=

TRACELOOP_BASE_URL=http://otel-collector:4318

REDIS_HOST=redis-airflow
REDIS_PORT=6379
REDIS_PASSWORD=

QDRANT_HOST=qdrant
QDRANT_PORT=6333
QDRANT_API_KEY=

GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

SMART_PROXY_HOST=dc.smartproxy.com
SMART_PROXY_PROTOCOL=http
SMART_PROXY_USER=
SMART_PROXY_PASSWORD=